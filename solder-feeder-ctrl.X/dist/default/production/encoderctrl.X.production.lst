

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Sun Apr 16 13:07:33 2023

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og1 
     1                           	processor	16F648A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2,group=1
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    15                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    16                           	dabs	1,0x7E,2
    17     0000                     
    18                           ; Generated 09/02/2023 GMT
    19                           ; 
    20                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution. Publication is not required when
    34                           ;        this file is used in an embedded application.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC16F648A Definitions
    50                           ; 
    51                           ; SFR Addresses
    52     0000                     	;# 
    53     0001                     	;# 
    54     0002                     	;# 
    55     0003                     	;# 
    56     0004                     	;# 
    57     0005                     	;# 
    58     0006                     	;# 
    59     000A                     	;# 
    60     000B                     	;# 
    61     000C                     	;# 
    62     000E                     	;# 
    63     000E                     	;# 
    64     000F                     	;# 
    65     0010                     	;# 
    66     0011                     	;# 
    67     0012                     	;# 
    68     0015                     	;# 
    69     0015                     	;# 
    70     0016                     	;# 
    71     0017                     	;# 
    72     0018                     	;# 
    73     0019                     	;# 
    74     001A                     	;# 
    75     001F                     	;# 
    76     0081                     	;# 
    77     0085                     	;# 
    78     0086                     	;# 
    79     008C                     	;# 
    80     008E                     	;# 
    81     0092                     	;# 
    82     0098                     	;# 
    83     0099                     	;# 
    84     009A                     	;# 
    85     009B                     	;# 
    86     009C                     	;# 
    87     009D                     	;# 
    88     009F                     	;# 
    89     0000                     	;# 
    90     0001                     	;# 
    91     0002                     	;# 
    92     0003                     	;# 
    93     0004                     	;# 
    94     0005                     	;# 
    95     0006                     	;# 
    96     000A                     	;# 
    97     000B                     	;# 
    98     000C                     	;# 
    99     000E                     	;# 
   100     000E                     	;# 
   101     000F                     	;# 
   102     0010                     	;# 
   103     0011                     	;# 
   104     0012                     	;# 
   105     0015                     	;# 
   106     0015                     	;# 
   107     0016                     	;# 
   108     0017                     	;# 
   109     0018                     	;# 
   110     0019                     	;# 
   111     001A                     	;# 
   112     001F                     	;# 
   113     0081                     	;# 
   114     0085                     	;# 
   115     0086                     	;# 
   116     008C                     	;# 
   117     008E                     	;# 
   118     0092                     	;# 
   119     0098                     	;# 
   120     0099                     	;# 
   121     009A                     	;# 
   122     009B                     	;# 
   123     009C                     	;# 
   124     009D                     	;# 
   125     009F                     	;# 
   126     0000                     	;# 
   127     0001                     	;# 
   128     0002                     	;# 
   129     0003                     	;# 
   130     0004                     	;# 
   131     0005                     	;# 
   132     0006                     	;# 
   133     000A                     	;# 
   134     000B                     	;# 
   135     000C                     	;# 
   136     000E                     	;# 
   137     000E                     	;# 
   138     000F                     	;# 
   139     0010                     	;# 
   140     0011                     	;# 
   141     0012                     	;# 
   142     0015                     	;# 
   143     0015                     	;# 
   144     0016                     	;# 
   145     0017                     	;# 
   146     0018                     	;# 
   147     0019                     	;# 
   148     001A                     	;# 
   149     001F                     	;# 
   150     0081                     	;# 
   151     0085                     	;# 
   152     0086                     	;# 
   153     008C                     	;# 
   154     008E                     	;# 
   155     0092                     	;# 
   156     0098                     	;# 
   157     0099                     	;# 
   158     009A                     	;# 
   159     009B                     	;# 
   160     009C                     	;# 
   161     009D                     	;# 
   162     009F                     	;# 
   163                           
   164                           	psect	strings
   165     0002                     __pstrings:
   166     0002                     stringtab:
   167     0002                     __stringtab:
   168     0002                     stringcode:	
   169                           ;	String table - string pointers are 1 byte each
   170                           
   171     0002                     stringdir:
   172     0002  3000               	movlw	high stringdir
   173     0003  008A               	movwf	10
   174     0004  0804               	movf	4,w
   175     0005  0A84               	incf	4,f
   176     0006  0782               	addwf	2,f
   177     0007                     __stringbase:
   178     0007  3400               	retlw	0
   179     0008                     __end_of__stringtab:
   180     0008                     _dpowers:
   181     0008  3401               	retlw	1
   182     0009  3400               	retlw	0
   183     000A  340A               	retlw	10
   184     000B  3400               	retlw	0
   185     000C  3464               	retlw	100
   186     000D  3400               	retlw	0
   187     000E  34E8               	retlw	232
   188     000F  3403               	retlw	3
   189     0010  3410               	retlw	16
   190     0011  3427               	retlw	39
   191     0012                     __end_of_dpowers:
   192     001A                     _RCREG	set	26
   193     0019                     _TXREG	set	25
   194     0018                     _RCSTA	set	24
   195     001F                     _CMCON	set	31
   196     0006                     _PORTB	set	6
   197     0005                     _PORTA	set	5
   198     0065                     _RCIF	set	101
   199     0064                     _TXIF	set	100
   200     0029                     _RA1	set	41
   201     0028                     _RA0	set	40
   202     0034                     _RB4	set	52
   203     0098                     _TXSTA	set	152
   204     0099                     _SPBRG	set	153
   205     0086                     _TRISB	set	134
   206     0085                     _TRISA	set	133
   207     0012                     STR_1:
   208     0012  3425               	retlw	37	;'%'
   209     0013  3464               	retlw	100	;'d'
   210     0014  342C               	retlw	44	;','
   211     0015  3420               	retlw	32	;' '
   212     0016  3425               	retlw	37	;'%'
   213     0017  3464               	retlw	100	;'d'
   214     0018  342C               	retlw	44	;','
   215     0019  3420               	retlw	32	;' '
   216     001A  3425               	retlw	37	;'%'
   217     001B  3464               	retlw	100	;'d'
   218     001C  342C               	retlw	44	;','
   219     001D  3420               	retlw	32	;' '
   220     001E  3425               	retlw	37	;'%'
   221     001F  3464               	retlw	100	;'d'
   222     0020  340D               	retlw	13
   223     0021  340A               	retlw	10
   224     0022  3400               	retlw	0
   225     001E                     
   226                           	psect	cinit
   227     07FD                     start_initialization:	
   228                           ; #config settings
   229                           
   230     07FD                     __initialization:
   231     07FD                     end_of_initialization:	
   232                           ;End of C runtime variable initialization code
   233                           
   234     07FD                     __end_of__initialization:
   235     07FD  0183               	clrf	3
   236     07FE  118A  2EF3         	ljmp	_main	;jump to C main() function
   237                           
   238                           	psect	cstackCOMMON
   239     0070                     __pcstackCOMMON:
   240     0070                     ?_initUART:
   241     0070                     ??_initUART:	
   242                           ; 1 bytes @ 0x0
   243                           
   244     0070                     ?_main:	
   245                           ; 1 bytes @ 0x0
   246                           
   247     0070                     ?_putch:	
   248                           ; 1 bytes @ 0x0
   249                           
   250     0070                     ??_putch:	
   251                           ; 1 bytes @ 0x0
   252                           
   253     0070                     ?___lwdiv:	
   254                           ; 1 bytes @ 0x0
   255                           
   256     0070                     putch@byte:	
   257                           ; 2 bytes @ 0x0
   258                           
   259     0070                     ___lwdiv@divisor:	
   260                           ; 1 bytes @ 0x0
   261                           
   262                           
   263                           ; 2 bytes @ 0x0
   264     0070                     	ds	2
   265     0072                     ___lwdiv@dividend:
   266                           
   267                           ; 2 bytes @ 0x2
   268     0072                     	ds	2
   269     0074                     ??___lwdiv:
   270     0074                     ___lwdiv@quotient:	
   271                           ; 1 bytes @ 0x4
   272                           
   273                           
   274                           ; 2 bytes @ 0x4
   275     0074                     	ds	2
   276     0076                     ___lwdiv@counter:
   277                           
   278                           ; 1 bytes @ 0x6
   279     0076                     	ds	1
   280     0077                     ?___lwmod:
   281     0077                     ___lwmod@divisor:	
   282                           ; 2 bytes @ 0x7
   283                           
   284                           
   285                           ; 2 bytes @ 0x7
   286     0077                     	ds	2
   287     0079                     ___lwmod@dividend:
   288                           
   289                           ; 2 bytes @ 0x9
   290     0079                     	ds	2
   291     007B                     ??___lwmod:
   292     007B                     ___lwmod@counter:	
   293                           ; 1 bytes @ 0xB
   294                           
   295                           
   296                           ; 1 bytes @ 0xB
   297     007B                     	ds	1
   298                           
   299                           	psect	cstackBANK0
   300     0020                     __pcstackBANK0:
   301     0020                     ?_printf:
   302                           
   303                           ; 2 bytes @ 0x0
   304     0020                     	ds	8
   305     0028                     ??_printf:
   306                           
   307                           ; 1 bytes @ 0x8
   308     0028                     	ds	3
   309     002B                     printf@ap:
   310                           
   311                           ; 1 bytes @ 0xB
   312     002B                     	ds	1
   313     002C                     printf@flag:
   314                           
   315                           ; 1 bytes @ 0xC
   316     002C                     	ds	1
   317     002D                     printf@prec:
   318                           
   319                           ; 1 bytes @ 0xD
   320     002D                     	ds	1
   321     002E                     printf@f:
   322                           
   323                           ; 1 bytes @ 0xE
   324     002E                     	ds	1
   325     002F                     printf@val:
   326                           
   327                           ; 2 bytes @ 0xF
   328     002F                     	ds	2
   329     0031                     printf@c:
   330                           
   331                           ; 1 bytes @ 0x11
   332     0031                     	ds	1
   333     0032                     ??_main:
   334                           
   335                           ; 1 bytes @ 0x12
   336     0032                     	ds	4
   337     0036                     main@dist:
   338                           
   339                           ; 2 bytes @ 0x16
   340     0036                     	ds	2
   341     0038                     main@pre_RA0:
   342                           
   343                           ; 2 bytes @ 0x18
   344     0038                     	ds	2
   345     003A                     main@pre_RA1:
   346                           
   347                           ; 2 bytes @ 0x1A
   348     003A                     	ds	2
   349     003C                     main@d:
   350                           
   351                           ; 2 bytes @ 0x1C
   352     003C                     	ds	2
   353                           
   354                           	psect	maintext
   355     06F3                     __pmaintext:	
   356 ;;
   357 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   358 ;;
   359 ;; *************** function _main *****************
   360 ;; Defined at:
   361 ;;		line 36 in file "main.c"
   362 ;; Parameters:    Size  Location     Type
   363 ;;		None
   364 ;; Auto vars:     Size  Location     Type
   365 ;;  tmp            20    0        unsigned char [20]
   366 ;;  d               2   28[BANK0 ] int 
   367 ;;  pre_RA1         2   26[BANK0 ] int 
   368 ;;  pre_RA0         2   24[BANK0 ] int 
   369 ;;  dist            2   22[BANK0 ] int 
   370 ;;  p               2    0        int 
   371 ;;  val             2    0        unsigned int 
   372 ;; Return value:  Size  Location     Type
   373 ;;                  1    wreg      void 
   374 ;; Registers used:
   375 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   376 ;; Tracked objects:
   377 ;;		On entry : B00/0
   378 ;;		On exit  : 0/0
   379 ;;		Unchanged: 0/0
   380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   381 ;;      Params:         0       0       0       0
   382 ;;      Locals:         0       8       0       0
   383 ;;      Temps:          0       4       0       0
   384 ;;      Totals:         0      12       0       0
   385 ;;Total ram usage:       12 bytes
   386 ;; Hardware stack levels required when called: 2
   387 ;; This function calls:
   388 ;;		_initUART
   389 ;;		_printf
   390 ;; This function is called by:
   391 ;;		Startup code after reset
   392 ;; This function uses a non-reentrant model
   393 ;;
   394                           
   395     06F3                     _main:	
   396                           ;psect for function _main
   397                           
   398     06F3                     l1002:	
   399                           ;incstack = 0
   400                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   401                           
   402                           
   403                           ;main.c: 38: PORTA = 0x00;
   404     06F3  1283               	bcf	3,5	;RP0=0, select bank0
   405     06F4  1303               	bcf	3,6	;RP1=0, select bank0
   406     06F5  0185               	clrf	5	;volatile
   407                           
   408                           ;main.c: 39: PORTB = 0x00;
   409     06F6  0186               	clrf	6	;volatile
   410     06F7                     l1004:
   411                           
   412                           ;main.c: 40: TRISA = 0b00000011;
   413     06F7  3003               	movlw	3
   414     06F8  1683               	bsf	3,5	;RP0=1, select bank1
   415     06F9  1303               	bcf	3,6	;RP1=0, select bank1
   416     06FA  0085               	movwf	5	;volatile
   417     06FB                     l1006:
   418                           
   419                           ;main.c: 41: TRISB = 0b00000010;
   420     06FB  3002               	movlw	2
   421     06FC  0086               	movwf	6	;volatile
   422     06FD                     l1008:
   423                           
   424                           ;main.c: 42: CMCON = 0b00000111;
   425     06FD  3007               	movlw	7
   426     06FE  1283               	bcf	3,5	;RP0=0, select bank0
   427     06FF  1303               	bcf	3,6	;RP1=0, select bank0
   428     0700  009F               	movwf	31	;volatile
   429     0701                     l1010:
   430                           
   431                           ;main.c: 44: initUART();
   432     0701  118A  25B5  118A   	fcall	_initUART
   433     0704                     l1012:
   434     0704                     l1014:
   435                           
   436                           ;main.c: 48: int pre_RA0 = 0;
   437     0704  1283               	bcf	3,5	;RP0=0, select bank0
   438     0705  1303               	bcf	3,6	;RP1=0, select bank0
   439     0706  01B8               	clrf	main@pre_RA0
   440     0707  01B9               	clrf	main@pre_RA0+1
   441     0708                     l1016:
   442                           
   443                           ;main.c: 49: int pre_RA1 = 0;
   444     0708  01BA               	clrf	main@pre_RA1
   445     0709  01BB               	clrf	main@pre_RA1+1
   446     070A                     l1018:
   447     070A                     l1020:
   448                           
   449                           ;main.c: 54: int dist = 0;
   450     070A  01B6               	clrf	main@dist
   451     070B  01B7               	clrf	main@dist+1
   452     070C                     l1022:
   453                           
   454                           ;main.c: 55: int d = 1;
   455     070C  3001               	movlw	1
   456     070D  00BC               	movwf	main@d
   457     070E  3000               	movlw	0
   458     070F  00BD               	movwf	main@d+1
   459     0710                     l1024:
   460                           
   461                           ;main.c: 60: _delay((unsigned long)((500)*(4000000/4000.0)));
   462     0710  3003               	movlw	3
   463     0711  1283               	bcf	3,5	;RP0=0, select bank0
   464     0712  1303               	bcf	3,6	;RP1=0, select bank0
   465     0713  00B4               	movwf	??_main+2
   466     0714  308A               	movlw	138
   467     0715  00B3               	movwf	??_main+1
   468     0716  3055               	movlw	85
   469     0717  00B2               	movwf	??_main
   470     0718                     u767:
   471     0718  0BB2               	decfsz	??_main,f
   472     0719  2F18               	goto	u767
   473     071A  0BB3               	decfsz	??_main+1,f
   474     071B  2F18               	goto	u767
   475     071C  0BB4               	decfsz	??_main+2,f
   476     071D  2F18               	goto	u767
   477     071E  0000               	nop
   478     071F                     l1026:
   479                           
   480                           ;main.c: 61: RB4 = 1;
   481     071F  1283               	bcf	3,5	;RP0=0, select bank0
   482     0720  1303               	bcf	3,6	;RP1=0, select bank0
   483     0721  1606               	bsf	6,4	;volatile
   484     0722                     l1028:
   485                           
   486                           ;main.c: 62: _delay((unsigned long)((500)*(4000000/4000.0)));
   487     0722  3003               	movlw	3
   488     0723  1283               	bcf	3,5	;RP0=0, select bank0
   489     0724  1303               	bcf	3,6	;RP1=0, select bank0
   490     0725  00B4               	movwf	??_main+2
   491     0726  308A               	movlw	138
   492     0727  00B3               	movwf	??_main+1
   493     0728  3055               	movlw	85
   494     0729  00B2               	movwf	??_main
   495     072A                     u777:
   496     072A  0BB2               	decfsz	??_main,f
   497     072B  2F2A               	goto	u777
   498     072C  0BB3               	decfsz	??_main+1,f
   499     072D  2F2A               	goto	u777
   500     072E  0BB4               	decfsz	??_main+2,f
   501     072F  2F2A               	goto	u777
   502     0730  0000               	nop
   503     0731                     l1030:
   504                           
   505                           ;main.c: 63: RB4 = 0;
   506     0731  1283               	bcf	3,5	;RP0=0, select bank0
   507     0732  1303               	bcf	3,6	;RP1=0, select bank0
   508     0733  1206               	bcf	6,4	;volatile
   509     0734                     l1032:
   510                           
   511                           ;main.c: 65: if (pre_RA0 == 0 && pre_RA1 == 0) {
   512     0734  0838               	movf	main@pre_RA0,w
   513     0735  0439               	iorwf	main@pre_RA0+1,w
   514     0736  1D03               	btfss	3,2
   515     0737  2F39               	goto	u601
   516     0738  2F3A               	goto	u600
   517     0739                     u601:
   518     0739  2F54               	goto	l1044
   519     073A                     u600:
   520     073A                     l1034:
   521     073A  083A               	movf	main@pre_RA1,w
   522     073B  043B               	iorwf	main@pre_RA1+1,w
   523     073C  1D03               	btfss	3,2
   524     073D  2F3F               	goto	u611
   525     073E  2F40               	goto	u610
   526     073F                     u611:
   527     073F  2F54               	goto	l1044
   528     0740                     u610:
   529     0740                     l1036:
   530                           
   531                           ;main.c: 66: if(RA0 == 1){
   532     0740  1C05               	btfss	5,0	;volatile
   533     0741  2F43               	goto	u621
   534     0742  2F44               	goto	u620
   535     0743                     u621:
   536     0743  2F4A               	goto	l1040
   537     0744                     u620:
   538     0744                     l1038:
   539                           
   540                           ;main.c: 67: dist += d;
   541     0744  083C               	movf	main@d,w
   542     0745  07B6               	addwf	main@dist,f
   543     0746  1803               	skipnc
   544     0747  0AB7               	incf	main@dist+1,f
   545     0748  083D               	movf	main@d+1,w
   546     0749  07B7               	addwf	main@dist+1,f
   547     074A                     l1040:
   548                           
   549                           ;main.c: 68: };main.c: 69: if(RA1 == 1){
   550     074A  1C85               	btfss	5,1	;volatile
   551     074B  2F4D               	goto	u631
   552     074C  2F4E               	goto	u630
   553     074D                     u631:
   554     074D  2F54               	goto	l1044
   555     074E                     u630:
   556     074E                     l1042:
   557                           
   558                           ;main.c: 70: dist -= d;
   559     074E  083C               	movf	main@d,w
   560     074F  02B6               	subwf	main@dist,f
   561     0750  083D               	movf	main@d+1,w
   562     0751  1C03               	skipc
   563     0752  03B7               	decf	main@dist+1,f
   564     0753  02B7               	subwf	main@dist+1,f
   565     0754                     l1044:
   566                           
   567                           ;main.c: 71: };main.c: 72: };main.c: 74: if (pre_RA0 == 1 && pre_RA1 == 0) {
   568     0754  0338               	decf	main@pre_RA0,w
   569     0755  0439               	iorwf	main@pre_RA0+1,w
   570     0756  1D03               	btfss	3,2
   571     0757  2F59               	goto	u641
   572     0758  2F5A               	goto	u640
   573     0759                     u641:
   574     0759  2F74               	goto	l1056
   575     075A                     u640:
   576     075A                     l1046:
   577     075A  083A               	movf	main@pre_RA1,w
   578     075B  043B               	iorwf	main@pre_RA1+1,w
   579     075C  1D03               	btfss	3,2
   580     075D  2F5F               	goto	u651
   581     075E  2F60               	goto	u650
   582     075F                     u651:
   583     075F  2F74               	goto	l1056
   584     0760                     u650:
   585     0760                     l1048:
   586                           
   587                           ;main.c: 75: if(RA0 == 0){
   588     0760  1805               	btfsc	5,0	;volatile
   589     0761  2F63               	goto	u661
   590     0762  2F64               	goto	u660
   591     0763                     u661:
   592     0763  2F6A               	goto	l1052
   593     0764                     u660:
   594     0764                     l1050:
   595                           
   596                           ;main.c: 76: dist -= d;
   597     0764  083C               	movf	main@d,w
   598     0765  02B6               	subwf	main@dist,f
   599     0766  083D               	movf	main@d+1,w
   600     0767  1C03               	skipc
   601     0768  03B7               	decf	main@dist+1,f
   602     0769  02B7               	subwf	main@dist+1,f
   603     076A                     l1052:
   604                           
   605                           ;main.c: 77: };main.c: 78: if(RA1 == 1){
   606     076A  1C85               	btfss	5,1	;volatile
   607     076B  2F6D               	goto	u671
   608     076C  2F6E               	goto	u670
   609     076D                     u671:
   610     076D  2F74               	goto	l1056
   611     076E                     u670:
   612     076E                     l1054:
   613                           
   614                           ;main.c: 79: dist += d;
   615     076E  083C               	movf	main@d,w
   616     076F  07B6               	addwf	main@dist,f
   617     0770  1803               	skipnc
   618     0771  0AB7               	incf	main@dist+1,f
   619     0772  083D               	movf	main@d+1,w
   620     0773  07B7               	addwf	main@dist+1,f
   621     0774                     l1056:
   622                           
   623                           ;main.c: 80: };main.c: 81: };main.c: 83: if (pre_RA0 == 0 && pre_RA1 == 1) {
   624     0774  0838               	movf	main@pre_RA0,w
   625     0775  0439               	iorwf	main@pre_RA0+1,w
   626     0776  1D03               	btfss	3,2
   627     0777  2F79               	goto	u681
   628     0778  2F7A               	goto	u680
   629     0779                     u681:
   630     0779  2F94               	goto	l1068
   631     077A                     u680:
   632     077A                     l1058:
   633     077A  033A               	decf	main@pre_RA1,w
   634     077B  043B               	iorwf	main@pre_RA1+1,w
   635     077C  1D03               	btfss	3,2
   636     077D  2F7F               	goto	u691
   637     077E  2F80               	goto	u690
   638     077F                     u691:
   639     077F  2F94               	goto	l1068
   640     0780                     u690:
   641     0780                     l1060:
   642                           
   643                           ;main.c: 84: if(RA0 == 1){
   644     0780  1C05               	btfss	5,0	;volatile
   645     0781  2F83               	goto	u701
   646     0782  2F84               	goto	u700
   647     0783                     u701:
   648     0783  2F8A               	goto	l1064
   649     0784                     u700:
   650     0784                     l1062:
   651                           
   652                           ;main.c: 85: dist -= d;
   653     0784  083C               	movf	main@d,w
   654     0785  02B6               	subwf	main@dist,f
   655     0786  083D               	movf	main@d+1,w
   656     0787  1C03               	skipc
   657     0788  03B7               	decf	main@dist+1,f
   658     0789  02B7               	subwf	main@dist+1,f
   659     078A                     l1064:
   660                           
   661                           ;main.c: 86: };main.c: 87: if(RA1 == 0){
   662     078A  1885               	btfsc	5,1	;volatile
   663     078B  2F8D               	goto	u711
   664     078C  2F8E               	goto	u710
   665     078D                     u711:
   666     078D  2F94               	goto	l1068
   667     078E                     u710:
   668     078E                     l1066:
   669                           
   670                           ;main.c: 88: dist += d;
   671     078E  083C               	movf	main@d,w
   672     078F  07B6               	addwf	main@dist,f
   673     0790  1803               	skipnc
   674     0791  0AB7               	incf	main@dist+1,f
   675     0792  083D               	movf	main@d+1,w
   676     0793  07B7               	addwf	main@dist+1,f
   677     0794                     l1068:
   678                           
   679                           ;main.c: 89: };main.c: 90: };main.c: 92: if (pre_RA0 == 1 && pre_RA1 == 1) {
   680     0794  0338               	decf	main@pre_RA0,w
   681     0795  0439               	iorwf	main@pre_RA0+1,w
   682     0796  1D03               	btfss	3,2
   683     0797  2F99               	goto	u721
   684     0798  2F9A               	goto	u720
   685     0799                     u721:
   686     0799  2FB4               	goto	l1080
   687     079A                     u720:
   688     079A                     l1070:
   689     079A  033A               	decf	main@pre_RA1,w
   690     079B  043B               	iorwf	main@pre_RA1+1,w
   691     079C  1D03               	btfss	3,2
   692     079D  2F9F               	goto	u731
   693     079E  2FA0               	goto	u730
   694     079F                     u731:
   695     079F  2FB4               	goto	l1080
   696     07A0                     u730:
   697     07A0                     l1072:
   698                           
   699                           ;main.c: 93: if(RA0 == 0){
   700     07A0  1805               	btfsc	5,0	;volatile
   701     07A1  2FA3               	goto	u741
   702     07A2  2FA4               	goto	u740
   703     07A3                     u741:
   704     07A3  2FAA               	goto	l1076
   705     07A4                     u740:
   706     07A4                     l1074:
   707                           
   708                           ;main.c: 94: dist += d;
   709     07A4  083C               	movf	main@d,w
   710     07A5  07B6               	addwf	main@dist,f
   711     07A6  1803               	skipnc
   712     07A7  0AB7               	incf	main@dist+1,f
   713     07A8  083D               	movf	main@d+1,w
   714     07A9  07B7               	addwf	main@dist+1,f
   715     07AA                     l1076:
   716                           
   717                           ;main.c: 95: };main.c: 96: if(RA1 == 0){
   718     07AA  1885               	btfsc	5,1	;volatile
   719     07AB  2FAD               	goto	u751
   720     07AC  2FAE               	goto	u750
   721     07AD                     u751:
   722     07AD  2FB4               	goto	l1080
   723     07AE                     u750:
   724     07AE                     l1078:
   725                           
   726                           ;main.c: 97: dist -= d;
   727     07AE  083C               	movf	main@d,w
   728     07AF  02B6               	subwf	main@dist,f
   729     07B0  083D               	movf	main@d+1,w
   730     07B1  1C03               	skipc
   731     07B2  03B7               	decf	main@dist+1,f
   732     07B3  02B7               	subwf	main@dist+1,f
   733     07B4                     l1080:
   734                           
   735                           ;main.c: 98: };main.c: 99: };main.c: 101: pre_RA0 = RA0;
   736     07B4  1003               	clrc
   737     07B5  1805               	btfsc	5,0	;volatile
   738     07B6  1403               	setc
   739     07B7  3000               	movlw	0
   740     07B8  1803               	skipnc
   741     07B9  3001               	movlw	1
   742     07BA  00B2               	movwf	??_main
   743     07BB  01B3               	clrf	??_main+1
   744     07BC  0832               	movf	??_main,w
   745     07BD  00B8               	movwf	main@pre_RA0
   746     07BE  0833               	movf	??_main+1,w
   747     07BF  00B9               	movwf	main@pre_RA0+1
   748     07C0                     l1082:
   749                           
   750                           ;main.c: 102: pre_RA1 = RA1;
   751     07C0  1003               	clrc
   752     07C1  1885               	btfsc	5,1	;volatile
   753     07C2  1403               	setc
   754     07C3  3000               	movlw	0
   755     07C4  1803               	skipnc
   756     07C5  3001               	movlw	1
   757     07C6  00B2               	movwf	??_main
   758     07C7  01B3               	clrf	??_main+1
   759     07C8  0832               	movf	??_main,w
   760     07C9  00BA               	movwf	main@pre_RA1
   761     07CA  0833               	movf	??_main+1,w
   762     07CB  00BB               	movwf	main@pre_RA1+1
   763     07CC                     l1084:
   764                           
   765                           ;main.c: 103: printf("%d, %d, %d, %d\r\n", pre_RA0, RA0, pre_RA1, RA1);
   766     07CC  0839               	movf	main@pre_RA0+1,w
   767     07CD  00A1               	movwf	?_printf+1
   768     07CE  0838               	movf	main@pre_RA0,w
   769     07CF  00A0               	movwf	?_printf
   770     07D0  1003               	clrc
   771     07D1  1805               	btfsc	5,0	;volatile
   772     07D2  1403               	setc
   773     07D3  3000               	movlw	0
   774     07D4  1803               	skipnc
   775     07D5  3001               	movlw	1
   776     07D6  00B2               	movwf	??_main
   777     07D7  01B3               	clrf	??_main+1
   778     07D8  0832               	movf	??_main,w
   779     07D9  00A2               	movwf	?_printf+2
   780     07DA  0833               	movf	??_main+1,w
   781     07DB  00A3               	movwf	?_printf+3
   782     07DC  083B               	movf	main@pre_RA1+1,w
   783     07DD  00A5               	movwf	?_printf+5
   784     07DE  083A               	movf	main@pre_RA1,w
   785     07DF  00A4               	movwf	?_printf+4
   786     07E0  1003               	clrc
   787     07E1  1885               	btfsc	5,1	;volatile
   788     07E2  1403               	setc
   789     07E3  3000               	movlw	0
   790     07E4  1803               	skipnc
   791     07E5  3001               	movlw	1
   792     07E6  00B4               	movwf	??_main+2
   793     07E7  01B5               	clrf	??_main+3
   794     07E8  0834               	movf	??_main+2,w
   795     07E9  00A6               	movwf	?_printf+6
   796     07EA  0835               	movf	??_main+3,w
   797     07EB  00A7               	movwf	?_printf+7
   798     07EC  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   799     07ED  118A  263E  118A   	fcall	_printf
   800     07F0                     l1086:
   801                           
   802                           ;main.c: 104: printf("%d\r\n", dist);
   803     07F0  1283               	bcf	3,5	;RP0=0, select bank0
   804     07F1  1303               	bcf	3,6	;RP1=0, select bank0
   805     07F2  0837               	movf	main@dist+1,w
   806     07F3  00A1               	movwf	?_printf+1
   807     07F4  0836               	movf	main@dist,w
   808     07F5  00A0               	movwf	?_printf
   809     07F6  3017               	movlw	(low (((STR_1+12)-__stringbase)| (0+32768)))& (0+255)
   810     07F7  118A  263E  118A   	fcall	_printf
   811     07FA  2F10               	goto	l1024
   812     07FB  118A  2800         	ljmp	start
   813     07FD                     __end_of_main:
   814                           
   815                           	psect	text1
   816     063E                     __ptext1:	
   817 ;; *************** function _printf *****************
   818 ;; Defined at:
   819 ;;		line 477 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c"
   820 ;; Parameters:    Size  Location     Type
   821 ;;  f               1    wreg     PTR const unsigned char 
   822 ;;		 -> STR_2(5), STR_1(17), 
   823 ;; Auto vars:     Size  Location     Type
   824 ;;  f               1   14[BANK0 ] PTR const unsigned char 
   825 ;;		 -> STR_2(5), STR_1(17), 
   826 ;;  tmpval          4    0        struct .
   827 ;;  val             2   15[BANK0 ] unsigned int 
   828 ;;  cp              2    0        PTR const unsigned char 
   829 ;;  len             2    0        unsigned int 
   830 ;;  c               1   17[BANK0 ] unsigned char 
   831 ;;  prec            1   13[BANK0 ] char 
   832 ;;  flag            1   12[BANK0 ] unsigned char 
   833 ;;  ap              1   11[BANK0 ] PTR void [1]
   834 ;;		 -> ?_printf(2), 
   835 ;; Return value:  Size  Location     Type
   836 ;;                  2    0[BANK0 ] int 
   837 ;; Registers used:
   838 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   839 ;; Tracked objects:
   840 ;;		On entry : 0/0
   841 ;;		On exit  : 0/0
   842 ;;		Unchanged: 0/0
   843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   844 ;;      Params:         0       8       0       0
   845 ;;      Locals:         0       7       0       0
   846 ;;      Temps:          0       3       0       0
   847 ;;      Totals:         0      18       0       0
   848 ;;Total ram usage:       18 bytes
   849 ;; Hardware stack levels used: 1
   850 ;; Hardware stack levels required when called: 1
   851 ;; This function calls:
   852 ;;		___lwdiv
   853 ;;		___lwmod
   854 ;;		_putch
   855 ;; This function is called by:
   856 ;;		_main
   857 ;; This function uses a non-reentrant model
   858 ;;
   859                           
   860     063E                     _printf:	
   861                           ;psect for function _printf
   862                           
   863                           
   864                           ;incstack = 0
   865                           ; Regs used in _printf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   866                           ;printf@f stored from wreg
   867     063E  1283               	bcf	3,5	;RP0=0, select bank0
   868     063F  1303               	bcf	3,6	;RP1=0, select bank0
   869     0640  00AE               	movwf	printf@f
   870     0641                     l952:
   871                           
   872                           ;doprnt.c: 479: va_list ap;;doprnt.c: 512: char c;;doprnt.c: 521: signed char prec;;dopr
      +                          nt.c: 525: unsigned char flag;;doprnt.c: 540: union {;doprnt.c: 541: unsigned long vd;;d
      +                          oprnt.c: 542: double integ;;doprnt.c: 543: } tmpval;;doprnt.c: 545: unsigned int val;;do
      +                          prnt.c: 546: unsigned len;;doprnt.c: 547: const char * cp;;doprnt.c: 550: *ap = __va_sta
      +                          rt();
   873     0641  3020               	movlw	(low (?_printf| 0))& (0+255)
   874     0642  00AB               	movwf	printf@ap
   875                           
   876                           ;doprnt.c: 553: while((c = *f++)) {
   877     0643  2EE2               	goto	l1000
   878     0644                     l954:
   879                           
   880                           ;doprnt.c: 555: if(c != '%')
   881     0644  3025               	movlw	37
   882     0645  0631               	xorwf	printf@c,w
   883     0646  1903               	btfsc	3,2
   884     0647  2E49               	goto	u531
   885     0648  2E4A               	goto	u530
   886     0649                     u531:
   887     0649  2E4F               	goto	l958
   888     064A                     u530:
   889     064A                     l956:
   890                           
   891                           ;doprnt.c: 557: {;doprnt.c: 558: (putch(c) );
   892     064A  0831               	movf	printf@c,w
   893     064B  118A  25AB  118A   	fcall	_putch
   894                           
   895                           ;doprnt.c: 559: continue;
   896     064E  2EE2               	goto	l1000
   897     064F                     l958:
   898                           
   899                           ;doprnt.c: 560: };doprnt.c: 565: flag = 0;
   900     064F  01AC               	clrf	printf@flag
   901     0650                     l962:	
   902                           ;doprnt.c: 661: switch(c = *f++) {
   903                           
   904     0650  3001               	movlw	1
   905     0651  07AE               	addwf	printf@f,f
   906     0652  30FF               	movlw	-1
   907     0653  072E               	addwf	printf@f,w
   908     0654  0084               	movwf	4
   909     0655  118A  2002  118A   	fcall	stringdir
   910     0658  00B1               	movwf	printf@c
   911                           
   912                           ; Switch size 1, requested type "simple"
   913                           ; Number of cases is 3, Range of values is 0 to 105
   914                           ; switch strategies available:
   915                           ; Name         Instructions Cycles
   916                           ; simple_byte           10     6 (average)
   917                           ; direct_byte          219     7 (fixed)
   918                           ; jumptable            260     6 (fixed)
   919                           ;	Chosen strategy is simple_byte
   920     0659  3A00               	xorlw	0	; case 0
   921     065A  1903               	skipnz
   922     065B  2EF2               	goto	l186
   923     065C  3A64               	xorlw	100	; case 100
   924     065D  1903               	skipnz
   925     065E  2E63               	goto	l964
   926     065F  3A0D               	xorlw	13	; case 105
   927     0660  1903               	skipnz
   928     0661  2E63               	goto	l964
   929     0662  2EE2               	goto	l1000
   930     0663                     l964:
   931                           
   932                           ;doprnt.c: 1279: {;doprnt.c: 1285: val = (unsigned int)(*(int *)__va_arg((*(int **)ap), 
      +                          (int)0));
   933     0663  082B               	movf	printf@ap,w
   934     0664  0084               	movwf	4
   935     0665  1383               	bcf	3,7	;select IRP bank0
   936     0666  0800               	movf	0,w
   937     0667  00AF               	movwf	printf@val
   938     0668  0A84               	incf	4,f
   939     0669  0800               	movf	0,w
   940     066A  00B0               	movwf	printf@val+1
   941     066B                     l966:
   942     066B  3002               	movlw	2
   943     066C  00FF               	movwf	btemp+1
   944     066D  087F               	movf	btemp+1,w
   945     066E  07AB               	addwf	printf@ap,f
   946     066F                     l968:
   947                           
   948                           ;doprnt.c: 1287: if((int)val < 0) {
   949     066F  1FB0               	btfss	printf@val+1,7
   950     0670  2E72               	goto	u541
   951     0671  2E73               	goto	u540
   952     0672                     u541:
   953     0672  2E7C               	goto	l974
   954     0673                     u540:
   955     0673                     l970:
   956                           
   957                           ;doprnt.c: 1288: flag |= 0x03;
   958     0673  3003               	movlw	3
   959     0674  00FF               	movwf	btemp+1
   960     0675  087F               	movf	btemp+1,w
   961     0676  04AC               	iorwf	printf@flag,f
   962     0677                     l972:
   963                           
   964                           ;doprnt.c: 1289: val = -val;
   965     0677  09AF               	comf	printf@val,f
   966     0678  09B0               	comf	printf@val+1,f
   967     0679  0AAF               	incf	printf@val,f
   968     067A  1903               	skipnz
   969     067B  0AB0               	incf	printf@val+1,f
   970     067C                     l974:
   971                           
   972                           ;doprnt.c: 1290: };doprnt.c: 1292: };doprnt.c: 1331: for(c = 1 ; c != sizeof dpowers/siz
      +                          eof dpowers[0] ; c++)
   973     067C  01B1               	clrf	printf@c
   974     067D  0AB1               	incf	printf@c,f
   975     067E                     l980:
   976                           
   977                           ;doprnt.c: 1332: if(val < dpowers[c])
   978     067E  0831               	movf	printf@c,w
   979     067F  00A8               	movwf	??_printf
   980     0680  0728               	addwf	??_printf,w
   981     0681  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
   982     0682  0084               	movwf	4
   983     0683  118A  2002  118A   	fcall	stringdir
   984     0686  00A9               	movwf	??_printf+1
   985     0687  118A  2002  118A   	fcall	stringdir
   986     068A  00AA               	movwf	??_printf+2
   987     068B  082A               	movf	??_printf+2,w
   988     068C  0230               	subwf	printf@val+1,w
   989     068D  1D03               	skipz
   990     068E  2E91               	goto	u555
   991     068F  0829               	movf	??_printf+1,w
   992     0690  022F               	subwf	printf@val,w
   993     0691                     u555:
   994     0691  1803               	skipnc
   995     0692  2E94               	goto	u551
   996     0693  2E95               	goto	u550
   997     0694                     u551:
   998     0694  2E96               	goto	l984
   999     0695                     u550:
  1000     0695  2EA0               	goto	l988
  1001     0696                     l984:
  1002     0696  3001               	movlw	1
  1003     0697  00FF               	movwf	btemp+1
  1004     0698  087F               	movf	btemp+1,w
  1005     0699  07B1               	addwf	printf@c,f
  1006     069A                     l986:
  1007     069A  3005               	movlw	5
  1008     069B  0631               	xorwf	printf@c,w
  1009     069C  1D03               	btfss	3,2
  1010     069D  2E9F               	goto	u561
  1011     069E  2EA0               	goto	u560
  1012     069F                     u561:
  1013     069F  2E7E               	goto	l980
  1014     06A0                     u560:
  1015     06A0                     l988:
  1016                           
  1017                           ;doprnt.c: 1448: {;doprnt.c: 1464: if(flag & 0x03)
  1018     06A0  082C               	movf	printf@flag,w
  1019     06A1  3903               	andlw	3
  1020     06A2  1903               	btfsc	3,2
  1021     06A3  2EA5               	goto	u571
  1022     06A4  2EA6               	goto	u570
  1023     06A5                     u571:
  1024     06A5  2EAA               	goto	l992
  1025     06A6                     u570:
  1026     06A6                     l990:
  1027                           
  1028                           ;doprnt.c: 1465: (putch('-') );
  1029     06A6  302D               	movlw	45
  1030     06A7  118A  25AB  118A   	fcall	_putch
  1031     06AA                     l992:
  1032                           
  1033                           ;doprnt.c: 1495: };doprnt.c: 1498: prec = c;
  1034     06AA  1283               	bcf	3,5	;RP0=0, select bank0
  1035     06AB  1303               	bcf	3,6	;RP1=0, select bank0
  1036     06AC  0831               	movf	printf@c,w
  1037     06AD  00AD               	movwf	printf@prec
  1038                           
  1039                           ;doprnt.c: 1500: while(prec--) {
  1040     06AE  2ED7               	goto	l998
  1041     06AF                     l994:
  1042                           
  1043                           ;doprnt.c: 1504: {;doprnt.c: 1515: c = (val / dpowers[(unsigned char)prec]) % 10 + '0';
  1044     06AF  300A               	movlw	10
  1045     06B0  00F7               	movwf	___lwmod@divisor
  1046     06B1  3000               	movlw	0
  1047     06B2  00F8               	movwf	___lwmod@divisor+1
  1048     06B3  082D               	movf	printf@prec,w
  1049     06B4  00A8               	movwf	??_printf
  1050     06B5  0728               	addwf	??_printf,w
  1051     06B6  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1052     06B7  0084               	movwf	4
  1053     06B8  118A  2002  118A   	fcall	stringdir
  1054     06BB  00F0               	movwf	___lwdiv@divisor
  1055     06BC  118A  2002  118A   	fcall	stringdir
  1056     06BF  00F1               	movwf	___lwdiv@divisor+1
  1057     06C0  0830               	movf	printf@val+1,w
  1058     06C1  00F3               	movwf	___lwdiv@dividend+1
  1059     06C2  082F               	movf	printf@val,w
  1060     06C3  00F2               	movwf	___lwdiv@dividend
  1061     06C4  118A  25FA  118A   	fcall	___lwdiv
  1062     06C7  0871               	movf	?___lwdiv+1,w
  1063     06C8  00FA               	movwf	___lwmod@dividend+1
  1064     06C9  0870               	movf	?___lwdiv,w
  1065     06CA  00F9               	movwf	___lwmod@dividend
  1066     06CB  118A  25C0  118A   	fcall	___lwmod
  1067     06CE  0877               	movf	?___lwmod,w
  1068     06CF  3E30               	addlw	48
  1069     06D0  1283               	bcf	3,5	;RP0=0, select bank0
  1070     06D1  1303               	bcf	3,6	;RP1=0, select bank0
  1071     06D2  00B1               	movwf	printf@c
  1072     06D3                     l996:
  1073                           
  1074                           ;doprnt.c: 1549: };doprnt.c: 1550: (putch(c) );
  1075     06D3  0831               	movf	printf@c,w
  1076     06D4  118A  25AB  118A   	fcall	_putch
  1077     06D7                     l998:
  1078     06D7  30FF               	movlw	255
  1079     06D8  00FF               	movwf	btemp+1
  1080     06D9  087F               	movf	btemp+1,w
  1081     06DA  1283               	bcf	3,5	;RP0=0, select bank0
  1082     06DB  1303               	bcf	3,6	;RP1=0, select bank0
  1083     06DC  07AD               	addwf	printf@prec,f
  1084     06DD  0A2D               	incf	printf@prec,w
  1085     06DE  1D03               	btfss	3,2
  1086     06DF  2EE1               	goto	u581
  1087     06E0  2EE2               	goto	u580
  1088     06E1                     u581:
  1089     06E1  2EAF               	goto	l994
  1090     06E2                     u580:
  1091     06E2                     l1000:
  1092     06E2  3001               	movlw	1
  1093     06E3  1283               	bcf	3,5	;RP0=0, select bank0
  1094     06E4  1303               	bcf	3,6	;RP1=0, select bank0
  1095     06E5  07AE               	addwf	printf@f,f
  1096     06E6  30FF               	movlw	-1
  1097     06E7  072E               	addwf	printf@f,w
  1098     06E8  0084               	movwf	4
  1099     06E9  118A  2002  118A   	fcall	stringdir
  1100     06EC  00B1               	movwf	printf@c
  1101     06ED  0831               	movf	printf@c,w
  1102     06EE  1D03               	btfss	3,2
  1103     06EF  2EF1               	goto	u591
  1104     06F0  2EF2               	goto	u590
  1105     06F1                     u591:
  1106     06F1  2E44               	goto	l954
  1107     06F2                     u590:
  1108     06F2                     l186:
  1109     06F2  0008               	return
  1110     06F3                     __end_of_printf:
  1111                           
  1112                           	psect	text2
  1113     05AB                     __ptext2:	
  1114 ;; *************** function _putch *****************
  1115 ;; Defined at:
  1116 ;;		line 13 in file "uart.c"
  1117 ;; Parameters:    Size  Location     Type
  1118 ;;  byte            1    wreg     unsigned char 
  1119 ;; Auto vars:     Size  Location     Type
  1120 ;;  byte            1    0[COMMON] unsigned char 
  1121 ;; Return value:  Size  Location     Type
  1122 ;;                  1    wreg      void 
  1123 ;; Registers used:
  1124 ;;		wreg
  1125 ;; Tracked objects:
  1126 ;;		On entry : 0/0
  1127 ;;		On exit  : 0/0
  1128 ;;		Unchanged: 0/0
  1129 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1130 ;;      Params:         0       0       0       0
  1131 ;;      Locals:         1       0       0       0
  1132 ;;      Temps:          0       0       0       0
  1133 ;;      Totals:         1       0       0       0
  1134 ;;Total ram usage:        1 bytes
  1135 ;; Hardware stack levels used: 1
  1136 ;; This function calls:
  1137 ;;		Nothing
  1138 ;; This function is called by:
  1139 ;;		_printf
  1140 ;;		_getche
  1141 ;; This function uses a non-reentrant model
  1142 ;;
  1143                           
  1144     05AB                     _putch:	
  1145                           ;psect for function _putch
  1146                           
  1147                           
  1148                           ;incstack = 0
  1149                           ; Regs used in _putch: [wreg]
  1150                           ;putch@byte stored from wreg
  1151     05AB  00F0               	movwf	putch@byte
  1152     05AC                     l898:
  1153     05AC                     l62:	
  1154                           ;uart.c: 15: while(!TXIF){
  1155                           
  1156     05AC  1283               	bcf	3,5	;RP0=0, select bank0
  1157     05AD  1303               	bcf	3,6	;RP1=0, select bank0
  1158     05AE  1E0C               	btfss	12,4	;volatile
  1159     05AF  2DB1               	goto	u391
  1160     05B0  2DB2               	goto	u390
  1161     05B1                     u391:
  1162     05B1  2DAC               	goto	l62
  1163     05B2                     u390:
  1164     05B2                     l900:
  1165                           
  1166                           ;uart.c: 16: };uart.c: 17: TXREG = byte;
  1167     05B2  0870               	movf	putch@byte,w
  1168     05B3  0099               	movwf	25	;volatile
  1169     05B4                     l65:
  1170     05B4  0008               	return
  1171     05B5                     __end_of_putch:
  1172                           
  1173                           	psect	text3
  1174     05C0                     __ptext3:	
  1175 ;; *************** function ___lwmod *****************
  1176 ;; Defined at:
  1177 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\lwmod.c"
  1178 ;; Parameters:    Size  Location     Type
  1179 ;;  divisor         2    7[COMMON] unsigned int 
  1180 ;;  dividend        2    9[COMMON] unsigned int 
  1181 ;; Auto vars:     Size  Location     Type
  1182 ;;  counter         1   11[COMMON] unsigned char 
  1183 ;; Return value:  Size  Location     Type
  1184 ;;                  2    7[COMMON] unsigned int 
  1185 ;; Registers used:
  1186 ;;		wreg, status,2, status,0, btemp+1
  1187 ;; Tracked objects:
  1188 ;;		On entry : 0/0
  1189 ;;		On exit  : 0/0
  1190 ;;		Unchanged: 0/0
  1191 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1192 ;;      Params:         4       0       0       0
  1193 ;;      Locals:         1       0       0       0
  1194 ;;      Temps:          0       0       0       0
  1195 ;;      Totals:         5       0       0       0
  1196 ;;Total ram usage:        5 bytes
  1197 ;; Hardware stack levels used: 1
  1198 ;; This function calls:
  1199 ;;		Nothing
  1200 ;; This function is called by:
  1201 ;;		_printf
  1202 ;; This function uses a non-reentrant model
  1203 ;;
  1204                           
  1205     05C0                     ___lwmod:	
  1206                           ;psect for function ___lwmod
  1207                           
  1208     05C0                     l928:	
  1209                           ;incstack = 0
  1210                           ; Regs used in ___lwmod: [wreg+status,2+status,0+btemp+1]
  1211                           
  1212     05C0  0877               	movf	___lwmod@divisor,w
  1213     05C1  0478               	iorwf	___lwmod@divisor+1,w
  1214     05C2  1903               	btfsc	3,2
  1215     05C3  2DC5               	goto	u471
  1216     05C4  2DC6               	goto	u470
  1217     05C5                     u471:
  1218     05C5  2DF5               	goto	l946
  1219     05C6                     u470:
  1220     05C6                     l930:
  1221     05C6  01FB               	clrf	___lwmod@counter
  1222     05C7  0AFB               	incf	___lwmod@counter,f
  1223     05C8  2DD4               	goto	l936
  1224     05C9                     l932:
  1225     05C9  3001               	movlw	1
  1226     05CA                     u485:
  1227     05CA  1003               	clrc
  1228     05CB  0DF7               	rlf	___lwmod@divisor,f
  1229     05CC  0DF8               	rlf	___lwmod@divisor+1,f
  1230     05CD  3EFF               	addlw	-1
  1231     05CE  1D03               	skipz
  1232     05CF  2DCA               	goto	u485
  1233     05D0                     l934:
  1234     05D0  3001               	movlw	1
  1235     05D1  00FF               	movwf	btemp+1
  1236     05D2  087F               	movf	btemp+1,w
  1237     05D3  07FB               	addwf	___lwmod@counter,f
  1238     05D4                     l936:
  1239     05D4  1FF8               	btfss	___lwmod@divisor+1,7
  1240     05D5  2DD7               	goto	u491
  1241     05D6  2DD8               	goto	u490
  1242     05D7                     u491:
  1243     05D7  2DC9               	goto	l932
  1244     05D8                     u490:
  1245     05D8                     l938:
  1246     05D8  0878               	movf	___lwmod@divisor+1,w
  1247     05D9  027A               	subwf	___lwmod@dividend+1,w
  1248     05DA  1D03               	skipz
  1249     05DB  2DDE               	goto	u505
  1250     05DC  0877               	movf	___lwmod@divisor,w
  1251     05DD  0279               	subwf	___lwmod@dividend,w
  1252     05DE                     u505:
  1253     05DE  1C03               	skipc
  1254     05DF  2DE1               	goto	u501
  1255     05E0  2DE2               	goto	u500
  1256     05E1                     u501:
  1257     05E1  2DE8               	goto	l942
  1258     05E2                     u500:
  1259     05E2                     l940:
  1260     05E2  0877               	movf	___lwmod@divisor,w
  1261     05E3  02F9               	subwf	___lwmod@dividend,f
  1262     05E4  0878               	movf	___lwmod@divisor+1,w
  1263     05E5  1C03               	skipc
  1264     05E6  03FA               	decf	___lwmod@dividend+1,f
  1265     05E7  02FA               	subwf	___lwmod@dividend+1,f
  1266     05E8                     l942:
  1267     05E8  3001               	movlw	1
  1268     05E9                     u515:
  1269     05E9  1003               	clrc
  1270     05EA  0CF8               	rrf	___lwmod@divisor+1,f
  1271     05EB  0CF7               	rrf	___lwmod@divisor,f
  1272     05EC  3EFF               	addlw	-1
  1273     05ED  1D03               	skipz
  1274     05EE  2DE9               	goto	u515
  1275     05EF                     l944:
  1276     05EF  3001               	movlw	1
  1277     05F0  02FB               	subwf	___lwmod@counter,f
  1278     05F1  1D03               	btfss	3,2
  1279     05F2  2DF4               	goto	u521
  1280     05F3  2DF5               	goto	u520
  1281     05F4                     u521:
  1282     05F4  2DD8               	goto	l938
  1283     05F5                     u520:
  1284     05F5                     l946:
  1285     05F5  087A               	movf	___lwmod@dividend+1,w
  1286     05F6  00F8               	movwf	?___lwmod+1
  1287     05F7  0879               	movf	___lwmod@dividend,w
  1288     05F8  00F7               	movwf	?___lwmod
  1289     05F9                     l472:
  1290     05F9  0008               	return
  1291     05FA                     __end_of___lwmod:
  1292                           
  1293                           	psect	text4
  1294     05FA                     __ptext4:	
  1295 ;; *************** function ___lwdiv *****************
  1296 ;; Defined at:
  1297 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\lwdiv.c"
  1298 ;; Parameters:    Size  Location     Type
  1299 ;;  divisor         2    0[COMMON] unsigned int 
  1300 ;;  dividend        2    2[COMMON] unsigned int 
  1301 ;; Auto vars:     Size  Location     Type
  1302 ;;  quotient        2    4[COMMON] unsigned int 
  1303 ;;  counter         1    6[COMMON] unsigned char 
  1304 ;; Return value:  Size  Location     Type
  1305 ;;                  2    0[COMMON] unsigned int 
  1306 ;; Registers used:
  1307 ;;		wreg, status,2, status,0, btemp+1
  1308 ;; Tracked objects:
  1309 ;;		On entry : 0/0
  1310 ;;		On exit  : 0/0
  1311 ;;		Unchanged: 0/0
  1312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1313 ;;      Params:         4       0       0       0
  1314 ;;      Locals:         3       0       0       0
  1315 ;;      Temps:          0       0       0       0
  1316 ;;      Totals:         7       0       0       0
  1317 ;;Total ram usage:        7 bytes
  1318 ;; Hardware stack levels used: 1
  1319 ;; This function calls:
  1320 ;;		Nothing
  1321 ;; This function is called by:
  1322 ;;		_printf
  1323 ;; This function uses a non-reentrant model
  1324 ;;
  1325                           
  1326     05FA                     ___lwdiv:	
  1327                           ;psect for function ___lwdiv
  1328                           
  1329     05FA                     l902:	
  1330                           ;incstack = 0
  1331                           ; Regs used in ___lwdiv: [wreg+status,2+status,0+btemp+1]
  1332                           
  1333     05FA  01F4               	clrf	___lwdiv@quotient
  1334     05FB  01F5               	clrf	___lwdiv@quotient+1
  1335     05FC                     l904:
  1336     05FC  0870               	movf	___lwdiv@divisor,w
  1337     05FD  0471               	iorwf	___lwdiv@divisor+1,w
  1338     05FE  1903               	btfsc	3,2
  1339     05FF  2E01               	goto	u401
  1340     0600  2E02               	goto	u400
  1341     0601                     u401:
  1342     0601  2E39               	goto	l924
  1343     0602                     u400:
  1344     0602                     l906:
  1345     0602  01F6               	clrf	___lwdiv@counter
  1346     0603  0AF6               	incf	___lwdiv@counter,f
  1347     0604  2E10               	goto	l912
  1348     0605                     l908:
  1349     0605  3001               	movlw	1
  1350     0606                     u415:
  1351     0606  1003               	clrc
  1352     0607  0DF0               	rlf	___lwdiv@divisor,f
  1353     0608  0DF1               	rlf	___lwdiv@divisor+1,f
  1354     0609  3EFF               	addlw	-1
  1355     060A  1D03               	skipz
  1356     060B  2E06               	goto	u415
  1357     060C                     l910:
  1358     060C  3001               	movlw	1
  1359     060D  00FF               	movwf	btemp+1
  1360     060E  087F               	movf	btemp+1,w
  1361     060F  07F6               	addwf	___lwdiv@counter,f
  1362     0610                     l912:
  1363     0610  1FF1               	btfss	___lwdiv@divisor+1,7
  1364     0611  2E13               	goto	u421
  1365     0612  2E14               	goto	u420
  1366     0613                     u421:
  1367     0613  2E05               	goto	l908
  1368     0614                     u420:
  1369     0614                     l914:
  1370     0614  3001               	movlw	1
  1371     0615                     u435:
  1372     0615  1003               	clrc
  1373     0616  0DF4               	rlf	___lwdiv@quotient,f
  1374     0617  0DF5               	rlf	___lwdiv@quotient+1,f
  1375     0618  3EFF               	addlw	-1
  1376     0619  1D03               	skipz
  1377     061A  2E15               	goto	u435
  1378     061B  0871               	movf	___lwdiv@divisor+1,w
  1379     061C  0273               	subwf	___lwdiv@dividend+1,w
  1380     061D  1D03               	skipz
  1381     061E  2E21               	goto	u445
  1382     061F  0870               	movf	___lwdiv@divisor,w
  1383     0620  0272               	subwf	___lwdiv@dividend,w
  1384     0621                     u445:
  1385     0621  1C03               	skipc
  1386     0622  2E24               	goto	u441
  1387     0623  2E25               	goto	u440
  1388     0624                     u441:
  1389     0624  2E2C               	goto	l920
  1390     0625                     u440:
  1391     0625                     l916:
  1392     0625  0870               	movf	___lwdiv@divisor,w
  1393     0626  02F2               	subwf	___lwdiv@dividend,f
  1394     0627  0871               	movf	___lwdiv@divisor+1,w
  1395     0628  1C03               	skipc
  1396     0629  03F3               	decf	___lwdiv@dividend+1,f
  1397     062A  02F3               	subwf	___lwdiv@dividend+1,f
  1398     062B                     l918:
  1399     062B  1474               	bsf	___lwdiv@quotient,0
  1400     062C                     l920:
  1401     062C  3001               	movlw	1
  1402     062D                     u455:
  1403     062D  1003               	clrc
  1404     062E  0CF1               	rrf	___lwdiv@divisor+1,f
  1405     062F  0CF0               	rrf	___lwdiv@divisor,f
  1406     0630  3EFF               	addlw	-1
  1407     0631  1D03               	skipz
  1408     0632  2E2D               	goto	u455
  1409     0633                     l922:
  1410     0633  3001               	movlw	1
  1411     0634  02F6               	subwf	___lwdiv@counter,f
  1412     0635  1D03               	btfss	3,2
  1413     0636  2E38               	goto	u461
  1414     0637  2E39               	goto	u460
  1415     0638                     u461:
  1416     0638  2E14               	goto	l914
  1417     0639                     u460:
  1418     0639                     l924:
  1419     0639  0875               	movf	___lwdiv@quotient+1,w
  1420     063A  00F1               	movwf	?___lwdiv+1
  1421     063B  0874               	movf	___lwdiv@quotient,w
  1422     063C  00F0               	movwf	?___lwdiv
  1423     063D                     l462:
  1424     063D  0008               	return
  1425     063E                     __end_of___lwdiv:
  1426                           
  1427                           	psect	text5
  1428     05B5                     __ptext5:	
  1429 ;; *************** function _initUART *****************
  1430 ;; Defined at:
  1431 ;;		line 6 in file "uart.c"
  1432 ;; Parameters:    Size  Location     Type
  1433 ;;		None
  1434 ;; Auto vars:     Size  Location     Type
  1435 ;;		None
  1436 ;; Return value:  Size  Location     Type
  1437 ;;                  1    wreg      void 
  1438 ;; Registers used:
  1439 ;;		wreg
  1440 ;; Tracked objects:
  1441 ;;		On entry : 0/0
  1442 ;;		On exit  : 0/0
  1443 ;;		Unchanged: 0/0
  1444 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1445 ;;      Params:         0       0       0       0
  1446 ;;      Locals:         0       0       0       0
  1447 ;;      Temps:          0       0       0       0
  1448 ;;      Totals:         0       0       0       0
  1449 ;;Total ram usage:        0 bytes
  1450 ;; Hardware stack levels used: 1
  1451 ;; This function calls:
  1452 ;;		Nothing
  1453 ;; This function is called by:
  1454 ;;		_main
  1455 ;; This function uses a non-reentrant model
  1456 ;;
  1457                           
  1458     05B5                     _initUART:	
  1459                           ;psect for function _initUART
  1460                           
  1461     05B5                     l950:	
  1462                           ;incstack = 0
  1463                           ; Regs used in _initUART: [wreg]
  1464                           
  1465                           
  1466                           ;uart.c: 8: SPBRG = ((unsigned char)(((4000000 / 16) / 9600) - 1));
  1467     05B5  3019               	movlw	25
  1468     05B6  1683               	bsf	3,5	;RP0=1, select bank1
  1469     05B7  1303               	bcf	3,6	;RP1=0, select bank1
  1470     05B8  0099               	movwf	25	;volatile
  1471                           
  1472                           ;uart.c: 9: TXSTA = (0x00 | 0x04 | 0x20);
  1473     05B9  3024               	movlw	36
  1474     05BA  0098               	movwf	24	;volatile
  1475                           
  1476                           ;uart.c: 10: RCSTA = (0x00 | 0x90);
  1477     05BB  3090               	movlw	144
  1478     05BC  1283               	bcf	3,5	;RP0=0, select bank0
  1479     05BD  1303               	bcf	3,6	;RP1=0, select bank0
  1480     05BE  0098               	movwf	24	;volatile
  1481     05BF                     l59:
  1482     05BF  0008               	return
  1483     05C0                     __end_of_initUART:
  1484     007E                     btemp	set	126	;btemp
  1485     007E                     wtemp0	set	126
  1486                           
  1487                           	psect	idloc
  1488                           
  1489                           ;Config register IDLOC0 @ 0x2000
  1490                           ;	unspecified, using default values
  1491     2000                     	org	8192
  1492     2000  3FFF               	dw	16383
  1493                           
  1494                           ;Config register IDLOC1 @ 0x2001
  1495                           ;	unspecified, using default values
  1496     2001                     	org	8193
  1497     2001  3FFF               	dw	16383
  1498                           
  1499                           ;Config register IDLOC2 @ 0x2002
  1500                           ;	unspecified, using default values
  1501     2002                     	org	8194
  1502     2002  3FFF               	dw	16383
  1503                           
  1504                           ;Config register IDLOC3 @ 0x2003
  1505                           ;	unspecified, using default values
  1506     2003                     	org	8195
  1507     2003  3FFF               	dw	16383
  1508                           
  1509                           	psect	config
  1510                           
  1511                           ;Config register CONFIG @ 0x2007
  1512                           ;	Oscillator Selection bits
  1513                           ;	FOSC = INTOSCIO, INTOSC oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function 
      +                          on RA7/OSC1/CLKIN
  1514                           ;	Watchdog Timer Enable bit
  1515                           ;	WDTE = OFF, WDT disabled
  1516                           ;	Power-up Timer Enable bit
  1517                           ;	PWRTE = OFF, PWRT disabled
  1518                           ;	RA5/MCLR/VPP Pin Function Select bit
  1519                           ;	MCLRE = ON, RA5/MCLR/VPP pin function is MCLR
  1520                           ;	Brown-out Detect Enable bit
  1521                           ;	BOREN = ON, BOD enabled
  1522                           ;	Low-Voltage Programming Enable bit
  1523                           ;	LVP = OFF, RB4/PGM pin has digital I/O function, HV on MCLR must be used for programmi
      +                          ng
  1524                           ;	Data EE Memory Code Protection bit
  1525                           ;	CPD = OFF, Data memory code protection off
  1526                           ;	Flash Program Memory Code Protection bit
  1527                           ;	CP = OFF, Code protection off
  1528     2007                     	org	8199
  1529     2007  3F78               	dw	16248

Data Sizes:
    Strings     17
    Constant    10
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      12
    BANK0            80     30      30
    BANK1            80      0       0
    BANK2            80      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(1) Largest target is 17
		 -> STR_2(CODE[5]), STR_1(CODE[17]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 


Critical Paths under _main in COMMON

    _printf->___lwmod
    ___lwmod->___lwdiv

Critical Paths under _main in BANK0

    _main->_printf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                36    36      0    1533
                                             18 BANK0     12    12      0
                           _initUART
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              26    18      8    1099
                                              0 BANK0     18    10      8
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     311
                                              7 COMMON     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     314
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (1) _initUART                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initUART
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      C       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               50     1E      1E       3       37.5%
BITBANK1            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK1               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK2            50      0       0       6        0.0%
BANK2               50      0       0       7        0.0%
ABS                  0      0       0       8        0.0%
BITBANK0            50      0       0       9        0.0%
DATA                 0      0       0      10        0.0%


Microchip Technology PIC Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Sun Apr 16 13:07:33 2023

                      pc 0002                       l62 05AC                       l65 05B4  
                     l59 05BF                       fsr 0004                      l186 06F2  
                    l462 063D                      l472 05F9                      l900 05B2  
                    l910 060C                      l902 05FA                      l920 062C  
                    l912 0610                      l904 05FC                      l922 0633  
                    l914 0614                      l906 0602                      l930 05C6  
                    l916 0625                      l908 0605                      l924 0639  
                    l940 05E2                      l932 05C9                      l950 05B5  
                    l918 062B                      l942 05E8                      l934 05D0  
                    l944 05EF                      l936 05D4                      l928 05C0  
                    l952 0641                      l938 05D8                      l946 05F5  
                    l970 0673                      l962 0650                      l954 0644  
                    l980 067E                      l972 0677                      l964 0663  
                    l956 064A                      l990 06A6                      l974 067C  
                    l966 066B                      l958 064F                      l992 06AA  
                    l984 0696                      l968 066F                      l898 05AC  
                    l994 06AF                      l986 069A                      l996 06D3  
                    l988 06A0                      l998 06D7                      _RA0 0028  
                    _RA1 0029                      _RB4 0034                      u400 0602  
                    u401 0601                      u420 0614                      u500 05E2  
                    u421 0613                      u501 05E1                      u415 0606  
                    u440 0625                      u520 05F5                      u600 073A  
                    u441 0624                      u521 05F4                      u505 05DE  
                    u601 0739                      u530 064A                      u610 0740  
                    u435 0615                      u515 05E9                      u531 0649  
                    u611 073F                      u460 0639                      u540 0673  
                    u700 0784                      u620 0744                      u461 0638  
                    u445 0621                      u541 0672                      u701 0783  
                    u621 0743                      u470 05C6                      u390 05B2  
                    u550 0695                      u710 078E                      u630 074E  
                    u455 062D                      u471 05C5                      u391 05B1  
                    u551 0694                      u711 078D                      u631 074D  
                    u560 06A0                      u720 079A                      u640 075A  
                    u561 069F                      u721 0799                      u641 0759  
                    u490 05D8                      u570 06A6                      u730 07A0  
                    u650 0760                      u491 05D7                      u571 06A5  
                    u555 0691                      u731 079F                      u651 075F  
                    u580 06E2                      u740 07A4                      u660 0764  
                    u485 05CA                      u581 06E1                      u741 07A3  
                    u661 0763                      u590 06F2                      u750 07AE  
                    u670 076E                      u591 06F1                      u751 07AD  
                    u671 076D                      u680 077A                      u681 0779  
                    u690 0780                      u691 077F                      u767 0718  
                    u777 072A                      fsr0 0004                      indf 0000  
                   l1000 06E2                     l1010 0701                     l1002 06F3  
                   l1020 070A                     l1012 0704                     l1004 06F7  
                   l1030 0731                     l1022 070C                     l1014 0704  
                   l1006 06FB                     l1040 074A                     l1032 0734  
                   l1024 0710                     l1016 0708                     l1008 06FD  
                   l1050 0764                     l1042 074E                     l1034 073A  
                   l1026 071F                     l1018 070A                     l1060 0780  
                   l1052 076A                     l1036 0740                     l1044 0754  
                   l1028 0722                     l1070 079A                     l1062 0784  
                   l1054 076E                     l1046 075A                     l1038 0744  
                   l1072 07A0                     l1080 07B4                     l1064 078A  
                   l1048 0760                     l1056 0774                     l1082 07C0  
                   l1074 07A4                     l1066 078E                     l1058 077A  
                   l1084 07CC                     l1076 07AA                     l1068 0794  
                   l1086 07F0                     l1078 07AE                     STR_1 0012  
                   STR_2 001E                     _RCIF 0065                     _TXIF 0064  
            main@pre_RA0 0038              main@pre_RA1 003A                     _main 06F3  
                   btemp 007E                     start 0000                    ?_main 0070  
                  _CMCON 001F          __end_of___lwdiv 063E          __end_of___lwmod 05FA  
                  _RCREG 001A                    _RCSTA 0018                    _SPBRG 0099  
                  _PORTA 0005                    _PORTB 0006                    _TRISA 0085  
                  _TRISB 0086                    _TXREG 0019                    _TXSTA 0098  
        __end_of_dpowers 0012                    _putch 05AB                    main@d 003C  
                  pclath 000A                    status 0003                    wtemp0 007E  
        __initialization 07FD             __end_of_main 07FD                   ??_main 0032  
                 ?_putch 0070         __end_of_initUART 05C0                ??___lwdiv 0074  
              ??___lwmod 007B                   _printf 063E  __end_of__initialization 07FD  
         __pcstackCOMMON 0070            __end_of_putch 05B5                  ??_putch 0070  
             __pmaintext 06F3                  ?_printf 0020               __stringtab 0002  
              ?_initUART 0070                  ___lwdiv 05FA                  ___lwmod 05C0  
                __ptext1 063E                  __ptext2 05AB                  __ptext3 05C0  
                __ptext4 05FA                  __ptext5 05B5                  _dpowers 0008  
   end_of_initialization 07FD               ??_initUART 0070                  printf@c 0031  
                printf@f 002E           __end_of_printf 06F3      start_initialization 07FD  
               ??_printf 0028                ___latbits 0001            __pcstackBANK0 0020  
       ___lwdiv@dividend 0072                 ?___lwdiv 0070                 ?___lwmod 0077  
              __pstrings 0002         ___lwdiv@quotient 0074              __stringbase 0007  
             printf@flag 002C               printf@prec 002D       __end_of__stringtab 0008  
        ___lwdiv@divisor 0070          ___lwdiv@counter 0076                 _initUART 05B5  
              printf@val 002F                 main@dist 0036                putch@byte 0070  
       ___lwmod@dividend 0079                stringcode 0002                 printf@ap 002B  
        ___lwmod@divisor 0077          ___lwmod@counter 007B                 stringdir 0002  
               stringtab 0002  
